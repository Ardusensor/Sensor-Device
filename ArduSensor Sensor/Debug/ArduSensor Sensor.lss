
ArduSensor Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000a32  00000ac6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d8  00800116  00800116  00000adc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000073f  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000281  00000000  00000000  000012f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000349  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  000018c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000341  00000000  00000000  00001a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000042c  00000000  00000000  00001d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002191  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	a7 c1       	rjmp	.+846    	; 0x35c <__vector_6>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	a5 c1       	rjmp	.+842    	; 0x370 <__vector_18>
  26:	d2 c1       	rjmp	.+932    	; 0x3cc <__vector_19>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 e3       	ldi	r30, 0x32	; 50
  48:	fa e0       	ldi	r31, 0x0A	; 10
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a6 31       	cpi	r26, 0x16	; 22
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a6 e1       	ldi	r26, 0x16	; 22
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ae 3e       	cpi	r26, 0xEE	; 238
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	25 d0       	rcall	.+74     	; 0xb2 <main>
  68:	e2 c4       	rjmp	.+2500   	; 0xa2e <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <Cap_Measure>:
}


uint16_t Cap_Measure(void)
{
	TCNT1=0;						//Reset counter
  6c:	10 92 85 00 	sts	0x0085, r1
  70:	10 92 84 00 	sts	0x0084, r1
	CLEARBIT(DDRD,PD6);				//stop charge draining
  74:	56 98       	cbi	0x0a, 6	; 10
	

	SETBIT(DDRD,PD5);				//Make Charge pin output
  76:	55 9a       	sbi	0x0a, 5	; 10
	TCCR1B=0b00000001;				//Start counter
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	80 93 81 00 	sts	0x0081, r24
	SETBIT(PORTD,PD5);				//Start loading the cap
  7e:	5d 9a       	sbi	0x0b, 5	; 11
	
	CLEARBIT(TIFR1,TOV1);			//Reset overflow flag
  80:	b0 98       	cbi	0x16, 0	; 22
	
	//wait until comparator registers change or counter overflows
	while((BITVAL(ACSR,ACO)!=1)|| (BITVAL(TIFR1,TOV1)))	
  82:	00 b6       	in	r0, 0x30	; 48
  84:	05 fe       	sbrs	r0, 5
  86:	fd cf       	rjmp	.-6      	; 0x82 <Cap_Measure+0x16>
  88:	b0 99       	sbic	0x16, 0	; 22
  8a:	fb cf       	rjmp	.-10     	; 0x82 <Cap_Measure+0x16>
	{
		//then we wait
	}
	
	TCCR1B = 0x00;					//stop counter
  8c:	10 92 81 00 	sts	0x0081, r1
	CLEARBIT(PORTD,PD5);			//stop charging
  90:	5d 98       	cbi	0x0b, 5	; 11
	SETBIT(DDRD,PD6);				//Start charge draining
  92:	56 9a       	sbi	0x0a, 6	; 10
	CLEARBIT(PORTD,PD6);			//drain charge in cap	
  94:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	8a 95       	dec	r24
  9a:	f1 f7       	brne	.-4      	; 0x98 <Cap_Measure+0x2c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <Cap_Measure+0x32>
	_delay_us(2);					//some time to get charge out before next measurement

	if(BITVAL(TIFR1,TOV1) == 0)
  9e:	b0 99       	sbic	0x16, 0	; 22
  a0:	05 c0       	rjmp	.+10     	; 0xac <Cap_Measure+0x40>
	{
		return(TCNT1);				//return time to charge
  a2:	80 91 84 00 	lds	r24, 0x0084
  a6:	90 91 85 00 	lds	r25, 0x0085
  aa:	08 95       	ret
	}
	
	else
	{
		return(0xFFFF);				//Way too big number for working cap measure
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
}
  b0:	08 95       	ret

000000b2 <main>:
uint16_t Cap_Measure(void);


int main(void)
{
	SETBIT(TCCR0B,CS00);			//Set timer prescale to clk
  b2:	85 b5       	in	r24, 0x25	; 37
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	85 bd       	out	0x25, r24	; 37
	SETBIT(DDRC,PC5);				//Set Xbee sleep ctrl pin as output
  b8:	3d 9a       	sbi	0x07, 5	; 7
	CLEARBIT(ACSR,ACD);				//Make sure that comparator works
  ba:	80 b7       	in	r24, 0x30	; 48
  bc:	8f 77       	andi	r24, 0x7F	; 127
  be:	80 bf       	out	0x30, r24	; 48
	DIDR1=0xFF;						//Analog comparator pins are not digital inputs
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	80 93 7f 00 	sts	0x007F, r24
	cli();							//no interrupts whlie dealing with wdt
  c6:	f8 94       	cli
	MCUSR = 0;						//null all previous reset info
  c8:	14 be       	out	0x34, r1	; 52
	wdt_disable();					//kill WDT
  ca:	88 e1       	ldi	r24, 0x18	; 24
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	f8 94       	cli
  d0:	80 93 60 00 	sts	0x0060, r24
  d4:	10 92 60 00 	sts	0x0060, r1
  d8:	0f be       	out	0x3f, r0	; 63
	SETBIT(DDRD,PD2);				//Ready pullup mosfet
  da:	52 9a       	sbi	0x0a, 2	; 10
	SETBIT(PORTD,PD2);				//pullup mosfet off
  dc:	5a 9a       	sbi	0x0b, 2	; 11
	sei();							//good place as any to enable interrupts
  de:	78 94       	sei
	
	uart_init(UART_BAUD_SELECT(9600,F_CPU));	//Enable xbee uart at 9600
  e0:	87 e6       	ldi	r24, 0x67	; 103
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	9d d1       	rcall	.+826    	; 0x420 <uart_init>
	
    while(1)
    {
		if(sleepCounter >= timeforsleep )
		{
			wdt_disable();				//no need for wdt here
  e6:	0f 2e       	mov	r0, r31
  e8:	f8 e1       	ldi	r31, 0x18	; 24
  ea:	2f 2e       	mov	r2, r31
  ec:	f0 2d       	mov	r31, r0
		
			_delay_ms(4);				//Stabilize time
	
			//Lets measure ADC values
			//First measurement. Disregard Int reference not stabilized
			ADMUX = 0b11000000;
  ee:	0f 2e       	mov	r0, r31
  f0:	fc e7       	ldi	r31, 0x7C	; 124
  f2:	cf 2e       	mov	r12, r31
  f4:	d1 2c       	mov	r13, r1
  f6:	f0 2d       	mov	r31, r0
  f8:	0f 2e       	mov	r0, r31
  fa:	f0 ec       	ldi	r31, 0xC0	; 192
  fc:	5f 2e       	mov	r5, r31
  fe:	f0 2d       	mov	r31, r0
			ADCSRA = 0b11000111;
 100:	0a e7       	ldi	r16, 0x7A	; 122
 102:	10 e0       	ldi	r17, 0x00	; 0
 104:	0f 2e       	mov	r0, r31
 106:	f7 ec       	ldi	r31, 0xC7	; 199
 108:	6f 2e       	mov	r6, r31
 10a:	f0 2d       	mov	r31, r0
			_delay_ms(3);
			TempValueSens = ADC;
 10c:	0f 2e       	mov	r0, r31
 10e:	f8 e7       	ldi	r31, 0x78	; 120
 110:	ef 2e       	mov	r14, r31
 112:	f1 2c       	mov	r15, r1
 114:	f0 2d       	mov	r31, r0
			ADMUX = 0b11000000;
			ADCSRA = 0b11000111;
			_delay_ms(3);
			TempValueSens = ADC;
		
			ADMUX = 0b11001000;
 116:	0f 2e       	mov	r0, r31
 118:	f8 ec       	ldi	r31, 0xC8	; 200
 11a:	3f 2e       	mov	r3, r31
 11c:	f0 2d       	mov	r31, r0
			ADCSRA = 0b11000111;
			_delay_ms(3);
			TempValueI = ADC;
		
			ADMUX = 0b11000001;
 11e:	0f 2e       	mov	r0, r31
 120:	f1 ec       	ldi	r31, 0xC1	; 193
 122:	4f 2e       	mov	r4, r31
 124:	f0 2d       	mov	r31, r0
			uint16_t tvi = TempValueI;
			uint16_t vv = VoltageValue;
			uint16_t cm = CapMeas;

			//more formating and uart transmit
			sprintf(buffer,"<%d;%d;%d;%d;%d>", tvi, tvse, vv, cm, SC );	//temperatuuriv‰‰rtus prose, temp v sensor, Pingev‰‰rtus, V‰rske mahtuvuse mııtmine, sendcounter.
 126:	0f 2e       	mov	r0, r31
 128:	f4 e0       	ldi	r31, 0x04	; 4
 12a:	8f 2e       	mov	r8, r31
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	9f 2e       	mov	r9, r31
 130:	f0 2d       	mov	r31, r0
 132:	0f 2e       	mov	r0, r31
 134:	fe ea       	ldi	r31, 0xAE	; 174
 136:	af 2e       	mov	r10, r31
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	bf 2e       	mov	r11, r31
 13c:	f0 2d       	mov	r31, r0

		
		//Enable wdt and go to sleep
		++sleepCounter;
		cli();
		SETBIT(WDTCSR,WDCE);		//writing to watchdog.
 13e:	c0 e6       	ldi	r28, 0x60	; 96
 140:	d0 e0       	ldi	r29, 0x00	; 0
		WDTCSR= 0b01110001;			//Watchdog conf for 8s timeout, interrupt mode
 142:	0f 2e       	mov	r0, r31
 144:	f1 e7       	ldi	r31, 0x71	; 113
 146:	7f 2e       	mov	r7, r31
 148:	f0 2d       	mov	r31, r0
	uart_init(UART_BAUD_SELECT(9600,F_CPU));	//Enable xbee uart at 9600
	
	
    while(1)
    {
		if(sleepCounter >= timeforsleep )
 14a:	20 91 02 01 	lds	r18, 0x0102
 14e:	30 91 03 01 	lds	r19, 0x0103
 152:	80 91 00 01 	lds	r24, 0x0100
 156:	90 91 01 01 	lds	r25, 0x0101
 15a:	28 17       	cp	r18, r24
 15c:	39 07       	cpc	r19, r25
 15e:	08 f4       	brcc	.+2      	; 0x162 <main+0xb0>
 160:	df c0       	rjmp	.+446    	; 0x320 <__stack+0x21>
		{
			wdt_disable();				//no need for wdt here
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	20 92 60 00 	sts	0x0060, r2
 16a:	10 92 60 00 	sts	0x0060, r1
 16e:	0f be       	out	0x3f, r0	; 63
			
			CLEARBIT(PORTC,PC5);		//Wake up xbee (also needs some time) 
 170:	45 98       	cbi	0x08, 5	; 8
			CLEARBIT(PORTD,PD2);		//Start peripherals under mosfet
 172:	5a 98       	cbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	8f e7       	ldi	r24, 0x7F	; 127
 176:	9e e3       	ldi	r25, 0x3E	; 62
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0xc6>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0xcc>
 17e:	00 00       	nop
		
			_delay_ms(4);				//Stabilize time
	
			//Lets measure ADC values
			//First measurement. Disregard Int reference not stabilized
			ADMUX = 0b11000000;
 180:	f6 01       	movw	r30, r12
 182:	50 82       	st	Z, r5
			ADCSRA = 0b11000111;
 184:	f8 01       	movw	r30, r16
 186:	60 82       	st	Z, r6
 188:	8f ed       	ldi	r24, 0xDF	; 223
 18a:	9e e2       	ldi	r25, 0x2E	; 46
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0xda>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0xe0>
 192:	00 00       	nop
			_delay_ms(3);
			TempValueSens = ADC;
 194:	f7 01       	movw	r30, r14
 196:	80 81       	ld	r24, Z
 198:	91 81       	ldd	r25, Z+1	; 0x01
 19a:	90 93 28 01 	sts	0x0128, r25
 19e:	80 93 27 01 	sts	0x0127, r24
		
			ADMUX = 0b11000000;
 1a2:	f6 01       	movw	r30, r12
 1a4:	50 82       	st	Z, r5
			ADCSRA = 0b11000111;
 1a6:	f8 01       	movw	r30, r16
 1a8:	60 82       	st	Z, r6
 1aa:	8f ed       	ldi	r24, 0xDF	; 223
 1ac:	9e e2       	ldi	r25, 0x2E	; 46
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0xfc>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x102>
 1b4:	00 00       	nop
			_delay_ms(3);
			TempValueSens = ADC;
 1b6:	f7 01       	movw	r30, r14
 1b8:	80 81       	ld	r24, Z
 1ba:	91 81       	ldd	r25, Z+1	; 0x01
 1bc:	90 93 28 01 	sts	0x0128, r25
 1c0:	80 93 27 01 	sts	0x0127, r24
		
			ADMUX = 0b11001000;
 1c4:	f6 01       	movw	r30, r12
 1c6:	30 82       	st	Z, r3
			ADCSRA = 0b11000111;
 1c8:	f8 01       	movw	r30, r16
 1ca:	60 82       	st	Z, r6
 1cc:	8f ed       	ldi	r24, 0xDF	; 223
 1ce:	9e e2       	ldi	r25, 0x2E	; 46
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <main+0x11e>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x124>
 1d6:	00 00       	nop
			_delay_ms(3);
			TempValueI = ADC;
 1d8:	f7 01       	movw	r30, r14
 1da:	80 81       	ld	r24, Z
 1dc:	91 81       	ldd	r25, Z+1	; 0x01
 1de:	90 93 26 01 	sts	0x0126, r25
 1e2:	80 93 25 01 	sts	0x0125, r24
		
			ADMUX = 0b11000001;
 1e6:	f6 01       	movw	r30, r12
 1e8:	40 82       	st	Z, r4
			ADCSRA = 0b11000111;
 1ea:	f8 01       	movw	r30, r16
 1ec:	60 82       	st	Z, r6
 1ee:	8f ed       	ldi	r24, 0xDF	; 223
 1f0:	9e e2       	ldi	r25, 0x2E	; 46
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <main+0x140>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <main+0x146>
 1f8:	00 00       	nop
			_delay_ms(3);
			VoltageValue = ADC;
 1fa:	f7 01       	movw	r30, r14
 1fc:	80 81       	ld	r24, Z
 1fe:	91 81       	ldd	r25, Z+1	; 0x01
 200:	90 93 24 01 	sts	0x0124, r25
 204:	80 93 23 01 	sts	0x0123, r24
			CLEARBIT(ADCSRA,ADEN);
 208:	f8 01       	movw	r30, r16
 20a:	80 81       	ld	r24, Z
 20c:	8f 77       	andi	r24, 0x7F	; 127
 20e:	80 83       	st	Z, r24
		
			//Take some cap measures
			CapMeasA = Cap_Measure();
 210:	2d df       	rcall	.-422    	; 0x6c <Cap_Measure>
 212:	90 93 1f 01 	sts	0x011F, r25
 216:	80 93 1e 01 	sts	0x011E, r24
			CapMeasB = Cap_Measure();
 21a:	28 df       	rcall	.-432    	; 0x6c <Cap_Measure>
 21c:	90 93 1d 01 	sts	0x011D, r25
 220:	80 93 1c 01 	sts	0x011C, r24
			CapMeasC = Cap_Measure();
 224:	23 df       	rcall	.-442    	; 0x6c <Cap_Measure>
 226:	90 93 1b 01 	sts	0x011B, r25
 22a:	80 93 1a 01 	sts	0x011A, r24
			CapMeasD = Cap_Measure();
 22e:	1e df       	rcall	.-452    	; 0x6c <Cap_Measure>
 230:	90 93 19 01 	sts	0x0119, r25
 234:	80 93 18 01 	sts	0x0118, r24
			CapMeasE = Cap_Measure();
 238:	19 df       	rcall	.-462    	; 0x6c <Cap_Measure>
 23a:	90 93 17 01 	sts	0x0117, r25
 23e:	80 93 16 01 	sts	0x0116, r24
			
			//Calculate average
			CapMeas =  (CapMeasA + CapMeasB + CapMeasC + CapMeasD + CapMeasE)/5;
 242:	40 91 1c 01 	lds	r20, 0x011C
 246:	50 91 1d 01 	lds	r21, 0x011D
 24a:	20 91 1e 01 	lds	r18, 0x011E
 24e:	30 91 1f 01 	lds	r19, 0x011F
 252:	24 0f       	add	r18, r20
 254:	35 1f       	adc	r19, r21
 256:	40 91 1a 01 	lds	r20, 0x011A
 25a:	50 91 1b 01 	lds	r21, 0x011B
 25e:	24 0f       	add	r18, r20
 260:	35 1f       	adc	r19, r21
 262:	40 91 18 01 	lds	r20, 0x0118
 266:	50 91 19 01 	lds	r21, 0x0119
 26a:	24 0f       	add	r18, r20
 26c:	35 1f       	adc	r19, r21
 26e:	28 0f       	add	r18, r24
 270:	39 1f       	adc	r19, r25
 272:	ad ec       	ldi	r26, 0xCD	; 205
 274:	bc ec       	ldi	r27, 0xCC	; 204
 276:	10 d1       	rcall	.+544    	; 0x498 <__umulhisi3>
 278:	96 95       	lsr	r25
 27a:	87 95       	ror	r24
 27c:	96 95       	lsr	r25
 27e:	87 95       	ror	r24
 280:	90 93 22 01 	sts	0x0122, r25
 284:	80 93 21 01 	sts	0x0121, r24
		
			SETBIT(PORTD,PD2);			//Un initalize peripheral mosfet
 288:	5a 9a       	sbi	0x0b, 2	; 11
			uint16_t tvi = TempValueI;
			uint16_t vv = VoltageValue;
			uint16_t cm = CapMeas;

			//more formating and uart transmit
			sprintf(buffer,"<%d;%d;%d;%d;%d>", tvi, tvse, vv, cm, SC );	//temperatuuriv‰‰rtus prose, temp v sensor, Pingev‰‰rtus, V‰rske mahtuvuse mııtmine, sendcounter.
 28a:	80 91 20 01 	lds	r24, 0x0120
 28e:	1f 92       	push	r1
 290:	8f 93       	push	r24
 292:	80 91 22 01 	lds	r24, 0x0122
 296:	8f 93       	push	r24
 298:	80 91 21 01 	lds	r24, 0x0121
 29c:	8f 93       	push	r24
 29e:	80 91 24 01 	lds	r24, 0x0124
 2a2:	8f 93       	push	r24
 2a4:	80 91 23 01 	lds	r24, 0x0123
 2a8:	8f 93       	push	r24
 2aa:	80 91 28 01 	lds	r24, 0x0128
 2ae:	8f 93       	push	r24
 2b0:	80 91 27 01 	lds	r24, 0x0127
 2b4:	8f 93       	push	r24
 2b6:	80 91 26 01 	lds	r24, 0x0126
 2ba:	8f 93       	push	r24
 2bc:	80 91 25 01 	lds	r24, 0x0125
 2c0:	8f 93       	push	r24
 2c2:	9f 92       	push	r9
 2c4:	8f 92       	push	r8
 2c6:	bf 92       	push	r11
 2c8:	af 92       	push	r10
 2ca:	f2 d0       	rcall	.+484    	; 0x4b0 <sprintf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2cc:	fa e0       	ldi	r31, 0x0A	; 10
 2ce:	fa 95       	dec	r31
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <main+0x21c>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0x222>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d4:	2f ef       	ldi	r18, 0xFF	; 255
 2d6:	8f e4       	ldi	r24, 0x4F	; 79
 2d8:	93 ec       	ldi	r25, 0xC3	; 195
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	90 40       	sbci	r25, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <main+0x228>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <main+0x232>
 2e4:	00 00       	nop
			_delay_us(2);
			//Enter delay as needed for xbee wake up completion or check if xbee is awaken
			_delay_ms(4000);
			uart_puts(buffer);			//Sending Dataaaa
 2e6:	c5 01       	movw	r24, r10
 2e8:	c9 d0       	rcall	.+402    	; 0x47c <uart_puts>
			++SC;						//We are counting times we have sent with xbee
 2ea:	80 91 20 01 	lds	r24, 0x0120
 2ee:	8f 5f       	subi	r24, 0xFF	; 255
 2f0:	80 93 20 01 	sts	0x0120, r24
 2f4:	ef ef       	ldi	r30, 0xFF	; 255
 2f6:	f3 ed       	ldi	r31, 0xD3	; 211
 2f8:	20 e3       	ldi	r18, 0x30	; 48
 2fa:	e1 50       	subi	r30, 0x01	; 1
 2fc:	f0 40       	sbci	r31, 0x00	; 0
 2fe:	20 40       	sbci	r18, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0x248>
 302:	00 c0       	rjmp	.+0      	; 0x304 <__stack+0x5>
 304:	00 00       	nop

			_delay_ms(1000);			//wait for xbee transmit
			sleepCounter = 0;			//since we had our beauty sleep
 306:	10 92 03 01 	sts	0x0103, r1
 30a:	10 92 02 01 	sts	0x0102, r1
			SETBIT(PORTC,PC5);			//Xbee time to sleep
 30e:	45 9a       	sbi	0x08, 5	; 8
 310:	8d b7       	in	r24, 0x3d	; 61
 312:	9e b7       	in	r25, 0x3e	; 62
 314:	0e 96       	adiw	r24, 0x0e	; 14
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
 31a:	9e bf       	out	0x3e, r25	; 62
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	8d bf       	out	0x3d, r24	; 61
		
	

		
		//Enable wdt and go to sleep
		++sleepCounter;
 320:	80 91 02 01 	lds	r24, 0x0102
 324:	90 91 03 01 	lds	r25, 0x0103
 328:	01 96       	adiw	r24, 0x01	; 1
 32a:	90 93 03 01 	sts	0x0103, r25
 32e:	80 93 02 01 	sts	0x0102, r24
		cli();
 332:	f8 94       	cli
		SETBIT(WDTCSR,WDCE);		//writing to watchdog.
 334:	88 81       	ld	r24, Y
 336:	80 61       	ori	r24, 0x10	; 16
 338:	88 83       	st	Y, r24
		WDTCSR= 0b01110001;			//Watchdog conf for 8s timeout, interrupt mode
 33a:	78 82       	st	Y, r7
		WDTCSR= 0b01110001;	
 33c:	78 82       	st	Y, r7
		
		set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 33e:	83 b7       	in	r24, 0x33	; 51
 340:	81 7f       	andi	r24, 0xF1	; 241
 342:	84 60       	ori	r24, 0x04	; 4
 344:	83 bf       	out	0x33, r24	; 51
		sleep_enable();
 346:	83 b7       	in	r24, 0x33	; 51
 348:	81 60       	ori	r24, 0x01	; 1
 34a:	83 bf       	out	0x33, r24	; 51
		sleep_bod_disable();
 34c:	85 b7       	in	r24, 0x35	; 53
 34e:	80 66       	ori	r24, 0x60	; 96
 350:	85 bf       	out	0x35, r24	; 53
 352:	8f 7d       	andi	r24, 0xDF	; 223
 354:	85 bf       	out	0x35, r24	; 53
		sei();
 356:	78 94       	sei
		sleep_cpu();
 358:	88 95       	sleep
		
				 
    }
 35a:	f7 ce       	rjmp	.-530    	; 0x14a <main+0x98>

0000035c <__vector_6>:
	}
	
}

ISR(WDT_vect)
{
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
	//_delay_us(1);	//this does not do else than wakes up CPU
}
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 370:	1f 92       	push	r1
 372:	0f 92       	push	r0
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	0f 92       	push	r0
 378:	11 24       	eor	r1, r1
 37a:	2f 93       	push	r18
 37c:	8f 93       	push	r24
 37e:	9f 93       	push	r25
 380:	ef 93       	push	r30
 382:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 384:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
 388:	20 91 c6 00 	lds	r18, 0x00C6
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
 38c:	88 71       	andi	r24, 0x18	; 24
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 38e:	e0 91 2b 01 	lds	r30, 0x012B
 392:	ef 5f       	subi	r30, 0xFF	; 255
 394:	ef 73       	andi	r30, 0x3F	; 63
    
    if ( tmphead == UART_RxTail ) {
 396:	90 91 2a 01 	lds	r25, 0x012A
 39a:	e9 17       	cp	r30, r25
 39c:	39 f0       	breq	.+14     	; 0x3ac <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 39e:	e0 93 2b 01 	sts	0x012B, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	e2 5d       	subi	r30, 0xD2	; 210
 3a6:	fe 4f       	sbci	r31, 0xFE	; 254
 3a8:	20 83       	st	Z, r18
 3aa:	01 c0       	rjmp	.+2      	; 0x3ae <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 3ac:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 3ae:	90 91 29 01 	lds	r25, 0x0129
 3b2:	89 2b       	or	r24, r25
 3b4:	80 93 29 01 	sts	0x0129, r24
}
 3b8:	ff 91       	pop	r31
 3ba:	ef 91       	pop	r30
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	2f 91       	pop	r18
 3c2:	0f 90       	pop	r0
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	0f 90       	pop	r0
 3c8:	1f 90       	pop	r1
 3ca:	18 95       	reti

000003cc <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	0f 92       	push	r0
 3d4:	11 24       	eor	r1, r1
 3d6:	8f 93       	push	r24
 3d8:	9f 93       	push	r25
 3da:	ef 93       	push	r30
 3dc:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 3de:	90 91 2d 01 	lds	r25, 0x012D
 3e2:	80 91 2c 01 	lds	r24, 0x012C
 3e6:	98 17       	cp	r25, r24
 3e8:	69 f0       	breq	.+26     	; 0x404 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 3ea:	e0 91 2c 01 	lds	r30, 0x012C
 3ee:	ef 5f       	subi	r30, 0xFF	; 255
 3f0:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
 3f2:	e0 93 2c 01 	sts	0x012C, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	e2 59       	subi	r30, 0x92	; 146
 3fa:	fe 4f       	sbci	r31, 0xFE	; 254
 3fc:	80 81       	ld	r24, Z
 3fe:	80 93 c6 00 	sts	0x00C6, r24
 402:	05 c0       	rjmp	.+10     	; 0x40e <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 404:	e1 ec       	ldi	r30, 0xC1	; 193
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	8f 7d       	andi	r24, 0xDF	; 223
 40c:	80 83       	st	Z, r24
    }
}
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	9f 91       	pop	r25
 414:	8f 91       	pop	r24
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 420:	10 92 2d 01 	sts	0x012D, r1
    UART_TxTail = 0;
 424:	10 92 2c 01 	sts	0x012C, r1
    UART_RxHead = 0;
 428:	10 92 2b 01 	sts	0x012B, r1
    UART_RxTail = 0;
 42c:	10 92 2a 01 	sts	0x012A, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 430:	99 23       	and	r25, r25
 432:	24 f4       	brge	.+8      	; 0x43c <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
 434:	22 e0       	ldi	r18, 0x02	; 2
 436:	20 93 c0 00 	sts	0x00C0, r18
   		baudrate &= ~0x8000;
 43a:	9f 77       	andi	r25, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
 43c:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char) baudrate;
 440:	80 93 c4 00 	sts	0x00C4, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 444:	88 e9       	ldi	r24, 0x98	; 152
 446:	80 93 c1 00 	sts	0x00C1, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
 44a:	86 e0       	ldi	r24, 0x06	; 6
 44c:	80 93 c2 00 	sts	0x00C2, r24
 450:	08 95       	ret

00000452 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 452:	20 91 2d 01 	lds	r18, 0x012D
 456:	2f 5f       	subi	r18, 0xFF	; 255
 458:	2f 73       	andi	r18, 0x3F	; 63
    
    while ( tmphead == UART_TxTail ){
 45a:	90 91 2c 01 	lds	r25, 0x012C
 45e:	29 17       	cp	r18, r25
 460:	e1 f3       	breq	.-8      	; 0x45a <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 462:	e2 2f       	mov	r30, r18
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	e2 59       	subi	r30, 0x92	; 146
 468:	fe 4f       	sbci	r31, 0xFE	; 254
 46a:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 46c:	20 93 2d 01 	sts	0x012D, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 470:	e1 ec       	ldi	r30, 0xC1	; 193
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	80 62       	ori	r24, 0x20	; 32
 478:	80 83       	st	Z, r24
 47a:	08 95       	ret

0000047c <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	ec 01       	movw	r28, r24
    while (*s) 
 482:	88 81       	ld	r24, Y
 484:	88 23       	and	r24, r24
 486:	29 f0       	breq	.+10     	; 0x492 <uart_puts+0x16>
 488:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
 48a:	e3 df       	rcall	.-58     	; 0x452 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 48c:	89 91       	ld	r24, Y+
 48e:	81 11       	cpse	r24, r1
 490:	fc cf       	rjmp	.-8      	; 0x48a <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	08 95       	ret

00000498 <__umulhisi3>:
 498:	a2 9f       	mul	r26, r18
 49a:	b0 01       	movw	r22, r0
 49c:	b3 9f       	mul	r27, r19
 49e:	c0 01       	movw	r24, r0
 4a0:	a3 9f       	mul	r26, r19
 4a2:	01 d0       	rcall	.+2      	; 0x4a6 <__umulhisi3+0xe>
 4a4:	b2 9f       	mul	r27, r18
 4a6:	70 0d       	add	r23, r0
 4a8:	81 1d       	adc	r24, r1
 4aa:	11 24       	eor	r1, r1
 4ac:	91 1d       	adc	r25, r1
 4ae:	08 95       	ret

000004b0 <sprintf>:
 4b0:	ae e0       	ldi	r26, 0x0E	; 14
 4b2:	b0 e0       	ldi	r27, 0x00	; 0
 4b4:	ed e5       	ldi	r30, 0x5D	; 93
 4b6:	f2 e0       	ldi	r31, 0x02	; 2
 4b8:	91 c2       	rjmp	.+1314   	; 0x9dc <__prologue_saves__+0x1c>
 4ba:	0d 89       	ldd	r16, Y+21	; 0x15
 4bc:	1e 89       	ldd	r17, Y+22	; 0x16
 4be:	86 e0       	ldi	r24, 0x06	; 6
 4c0:	8c 83       	std	Y+4, r24	; 0x04
 4c2:	1a 83       	std	Y+2, r17	; 0x02
 4c4:	09 83       	std	Y+1, r16	; 0x01
 4c6:	8f ef       	ldi	r24, 0xFF	; 255
 4c8:	9f e7       	ldi	r25, 0x7F	; 127
 4ca:	9e 83       	std	Y+6, r25	; 0x06
 4cc:	8d 83       	std	Y+5, r24	; 0x05
 4ce:	ae 01       	movw	r20, r28
 4d0:	47 5e       	subi	r20, 0xE7	; 231
 4d2:	5f 4f       	sbci	r21, 0xFF	; 255
 4d4:	6f 89       	ldd	r22, Y+23	; 0x17
 4d6:	78 8d       	ldd	r23, Y+24	; 0x18
 4d8:	ce 01       	movw	r24, r28
 4da:	01 96       	adiw	r24, 0x01	; 1
 4dc:	08 d0       	rcall	.+16     	; 0x4ee <vfprintf>
 4de:	ef 81       	ldd	r30, Y+7	; 0x07
 4e0:	f8 85       	ldd	r31, Y+8	; 0x08
 4e2:	e0 0f       	add	r30, r16
 4e4:	f1 1f       	adc	r31, r17
 4e6:	10 82       	st	Z, r1
 4e8:	2e 96       	adiw	r28, 0x0e	; 14
 4ea:	e4 e0       	ldi	r30, 0x04	; 4
 4ec:	93 c2       	rjmp	.+1318   	; 0xa14 <__epilogue_restores__+0x1c>

000004ee <vfprintf>:
 4ee:	ac e0       	ldi	r26, 0x0C	; 12
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	ec e7       	ldi	r30, 0x7C	; 124
 4f4:	f2 e0       	ldi	r31, 0x02	; 2
 4f6:	64 c2       	rjmp	.+1224   	; 0x9c0 <__prologue_saves__>
 4f8:	7c 01       	movw	r14, r24
 4fa:	6b 01       	movw	r12, r22
 4fc:	8a 01       	movw	r16, r20
 4fe:	fc 01       	movw	r30, r24
 500:	17 82       	std	Z+7, r1	; 0x07
 502:	16 82       	std	Z+6, r1	; 0x06
 504:	83 81       	ldd	r24, Z+3	; 0x03
 506:	81 ff       	sbrs	r24, 1
 508:	b0 c1       	rjmp	.+864    	; 0x86a <vfprintf+0x37c>
 50a:	ce 01       	movw	r24, r28
 50c:	01 96       	adiw	r24, 0x01	; 1
 50e:	4c 01       	movw	r8, r24
 510:	f7 01       	movw	r30, r14
 512:	93 81       	ldd	r25, Z+3	; 0x03
 514:	f6 01       	movw	r30, r12
 516:	93 fd       	sbrc	r25, 3
 518:	85 91       	lpm	r24, Z+
 51a:	93 ff       	sbrs	r25, 3
 51c:	81 91       	ld	r24, Z+
 51e:	6f 01       	movw	r12, r30
 520:	88 23       	and	r24, r24
 522:	09 f4       	brne	.+2      	; 0x526 <vfprintf+0x38>
 524:	9e c1       	rjmp	.+828    	; 0x862 <vfprintf+0x374>
 526:	85 32       	cpi	r24, 0x25	; 37
 528:	39 f4       	brne	.+14     	; 0x538 <vfprintf+0x4a>
 52a:	93 fd       	sbrc	r25, 3
 52c:	85 91       	lpm	r24, Z+
 52e:	93 ff       	sbrs	r25, 3
 530:	81 91       	ld	r24, Z+
 532:	6f 01       	movw	r12, r30
 534:	85 32       	cpi	r24, 0x25	; 37
 536:	21 f4       	brne	.+8      	; 0x540 <vfprintf+0x52>
 538:	b7 01       	movw	r22, r14
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	b1 d1       	rcall	.+866    	; 0x8a0 <fputc>
 53e:	e8 cf       	rjmp	.-48     	; 0x510 <vfprintf+0x22>
 540:	51 2c       	mov	r5, r1
 542:	31 2c       	mov	r3, r1
 544:	20 e0       	ldi	r18, 0x00	; 0
 546:	20 32       	cpi	r18, 0x20	; 32
 548:	a0 f4       	brcc	.+40     	; 0x572 <vfprintf+0x84>
 54a:	8b 32       	cpi	r24, 0x2B	; 43
 54c:	69 f0       	breq	.+26     	; 0x568 <vfprintf+0x7a>
 54e:	30 f4       	brcc	.+12     	; 0x55c <vfprintf+0x6e>
 550:	80 32       	cpi	r24, 0x20	; 32
 552:	59 f0       	breq	.+22     	; 0x56a <vfprintf+0x7c>
 554:	83 32       	cpi	r24, 0x23	; 35
 556:	69 f4       	brne	.+26     	; 0x572 <vfprintf+0x84>
 558:	20 61       	ori	r18, 0x10	; 16
 55a:	2c c0       	rjmp	.+88     	; 0x5b4 <vfprintf+0xc6>
 55c:	8d 32       	cpi	r24, 0x2D	; 45
 55e:	39 f0       	breq	.+14     	; 0x56e <vfprintf+0x80>
 560:	80 33       	cpi	r24, 0x30	; 48
 562:	39 f4       	brne	.+14     	; 0x572 <vfprintf+0x84>
 564:	21 60       	ori	r18, 0x01	; 1
 566:	26 c0       	rjmp	.+76     	; 0x5b4 <vfprintf+0xc6>
 568:	22 60       	ori	r18, 0x02	; 2
 56a:	24 60       	ori	r18, 0x04	; 4
 56c:	23 c0       	rjmp	.+70     	; 0x5b4 <vfprintf+0xc6>
 56e:	28 60       	ori	r18, 0x08	; 8
 570:	21 c0       	rjmp	.+66     	; 0x5b4 <vfprintf+0xc6>
 572:	27 fd       	sbrc	r18, 7
 574:	27 c0       	rjmp	.+78     	; 0x5c4 <vfprintf+0xd6>
 576:	30 ed       	ldi	r19, 0xD0	; 208
 578:	38 0f       	add	r19, r24
 57a:	3a 30       	cpi	r19, 0x0A	; 10
 57c:	78 f4       	brcc	.+30     	; 0x59c <vfprintf+0xae>
 57e:	26 ff       	sbrs	r18, 6
 580:	06 c0       	rjmp	.+12     	; 0x58e <vfprintf+0xa0>
 582:	fa e0       	ldi	r31, 0x0A	; 10
 584:	5f 9e       	mul	r5, r31
 586:	30 0d       	add	r19, r0
 588:	11 24       	eor	r1, r1
 58a:	53 2e       	mov	r5, r19
 58c:	13 c0       	rjmp	.+38     	; 0x5b4 <vfprintf+0xc6>
 58e:	8a e0       	ldi	r24, 0x0A	; 10
 590:	38 9e       	mul	r3, r24
 592:	30 0d       	add	r19, r0
 594:	11 24       	eor	r1, r1
 596:	33 2e       	mov	r3, r19
 598:	20 62       	ori	r18, 0x20	; 32
 59a:	0c c0       	rjmp	.+24     	; 0x5b4 <vfprintf+0xc6>
 59c:	8e 32       	cpi	r24, 0x2E	; 46
 59e:	21 f4       	brne	.+8      	; 0x5a8 <vfprintf+0xba>
 5a0:	26 fd       	sbrc	r18, 6
 5a2:	5f c1       	rjmp	.+702    	; 0x862 <vfprintf+0x374>
 5a4:	20 64       	ori	r18, 0x40	; 64
 5a6:	06 c0       	rjmp	.+12     	; 0x5b4 <vfprintf+0xc6>
 5a8:	8c 36       	cpi	r24, 0x6C	; 108
 5aa:	11 f4       	brne	.+4      	; 0x5b0 <vfprintf+0xc2>
 5ac:	20 68       	ori	r18, 0x80	; 128
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <vfprintf+0xc6>
 5b0:	88 36       	cpi	r24, 0x68	; 104
 5b2:	41 f4       	brne	.+16     	; 0x5c4 <vfprintf+0xd6>
 5b4:	f6 01       	movw	r30, r12
 5b6:	93 fd       	sbrc	r25, 3
 5b8:	85 91       	lpm	r24, Z+
 5ba:	93 ff       	sbrs	r25, 3
 5bc:	81 91       	ld	r24, Z+
 5be:	6f 01       	movw	r12, r30
 5c0:	81 11       	cpse	r24, r1
 5c2:	c1 cf       	rjmp	.-126    	; 0x546 <vfprintf+0x58>
 5c4:	98 2f       	mov	r25, r24
 5c6:	9f 7d       	andi	r25, 0xDF	; 223
 5c8:	95 54       	subi	r25, 0x45	; 69
 5ca:	93 30       	cpi	r25, 0x03	; 3
 5cc:	28 f4       	brcc	.+10     	; 0x5d8 <vfprintf+0xea>
 5ce:	0c 5f       	subi	r16, 0xFC	; 252
 5d0:	1f 4f       	sbci	r17, 0xFF	; 255
 5d2:	ff e3       	ldi	r31, 0x3F	; 63
 5d4:	f9 83       	std	Y+1, r31	; 0x01
 5d6:	0d c0       	rjmp	.+26     	; 0x5f2 <vfprintf+0x104>
 5d8:	83 36       	cpi	r24, 0x63	; 99
 5da:	31 f0       	breq	.+12     	; 0x5e8 <vfprintf+0xfa>
 5dc:	83 37       	cpi	r24, 0x73	; 115
 5de:	71 f0       	breq	.+28     	; 0x5fc <vfprintf+0x10e>
 5e0:	83 35       	cpi	r24, 0x53	; 83
 5e2:	09 f0       	breq	.+2      	; 0x5e6 <vfprintf+0xf8>
 5e4:	57 c0       	rjmp	.+174    	; 0x694 <vfprintf+0x1a6>
 5e6:	21 c0       	rjmp	.+66     	; 0x62a <vfprintf+0x13c>
 5e8:	f8 01       	movw	r30, r16
 5ea:	80 81       	ld	r24, Z
 5ec:	89 83       	std	Y+1, r24	; 0x01
 5ee:	0e 5f       	subi	r16, 0xFE	; 254
 5f0:	1f 4f       	sbci	r17, 0xFF	; 255
 5f2:	44 24       	eor	r4, r4
 5f4:	43 94       	inc	r4
 5f6:	51 2c       	mov	r5, r1
 5f8:	54 01       	movw	r10, r8
 5fa:	14 c0       	rjmp	.+40     	; 0x624 <vfprintf+0x136>
 5fc:	38 01       	movw	r6, r16
 5fe:	f2 e0       	ldi	r31, 0x02	; 2
 600:	6f 0e       	add	r6, r31
 602:	71 1c       	adc	r7, r1
 604:	f8 01       	movw	r30, r16
 606:	a0 80       	ld	r10, Z
 608:	b1 80       	ldd	r11, Z+1	; 0x01
 60a:	26 ff       	sbrs	r18, 6
 60c:	03 c0       	rjmp	.+6      	; 0x614 <vfprintf+0x126>
 60e:	65 2d       	mov	r22, r5
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	02 c0       	rjmp	.+4      	; 0x618 <vfprintf+0x12a>
 614:	6f ef       	ldi	r22, 0xFF	; 255
 616:	7f ef       	ldi	r23, 0xFF	; 255
 618:	c5 01       	movw	r24, r10
 61a:	2c 87       	std	Y+12, r18	; 0x0c
 61c:	36 d1       	rcall	.+620    	; 0x88a <strnlen>
 61e:	2c 01       	movw	r4, r24
 620:	83 01       	movw	r16, r6
 622:	2c 85       	ldd	r18, Y+12	; 0x0c
 624:	2f 77       	andi	r18, 0x7F	; 127
 626:	22 2e       	mov	r2, r18
 628:	16 c0       	rjmp	.+44     	; 0x656 <vfprintf+0x168>
 62a:	38 01       	movw	r6, r16
 62c:	f2 e0       	ldi	r31, 0x02	; 2
 62e:	6f 0e       	add	r6, r31
 630:	71 1c       	adc	r7, r1
 632:	f8 01       	movw	r30, r16
 634:	a0 80       	ld	r10, Z
 636:	b1 80       	ldd	r11, Z+1	; 0x01
 638:	26 ff       	sbrs	r18, 6
 63a:	03 c0       	rjmp	.+6      	; 0x642 <vfprintf+0x154>
 63c:	65 2d       	mov	r22, r5
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <vfprintf+0x158>
 642:	6f ef       	ldi	r22, 0xFF	; 255
 644:	7f ef       	ldi	r23, 0xFF	; 255
 646:	c5 01       	movw	r24, r10
 648:	2c 87       	std	Y+12, r18	; 0x0c
 64a:	14 d1       	rcall	.+552    	; 0x874 <strnlen_P>
 64c:	2c 01       	movw	r4, r24
 64e:	2c 85       	ldd	r18, Y+12	; 0x0c
 650:	20 68       	ori	r18, 0x80	; 128
 652:	22 2e       	mov	r2, r18
 654:	83 01       	movw	r16, r6
 656:	23 fc       	sbrc	r2, 3
 658:	19 c0       	rjmp	.+50     	; 0x68c <vfprintf+0x19e>
 65a:	83 2d       	mov	r24, r3
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	48 16       	cp	r4, r24
 660:	59 06       	cpc	r5, r25
 662:	a0 f4       	brcc	.+40     	; 0x68c <vfprintf+0x19e>
 664:	b7 01       	movw	r22, r14
 666:	80 e2       	ldi	r24, 0x20	; 32
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	1a d1       	rcall	.+564    	; 0x8a0 <fputc>
 66c:	3a 94       	dec	r3
 66e:	f5 cf       	rjmp	.-22     	; 0x65a <vfprintf+0x16c>
 670:	f5 01       	movw	r30, r10
 672:	27 fc       	sbrc	r2, 7
 674:	85 91       	lpm	r24, Z+
 676:	27 fe       	sbrs	r2, 7
 678:	81 91       	ld	r24, Z+
 67a:	5f 01       	movw	r10, r30
 67c:	b7 01       	movw	r22, r14
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0f d1       	rcall	.+542    	; 0x8a0 <fputc>
 682:	31 10       	cpse	r3, r1
 684:	3a 94       	dec	r3
 686:	f1 e0       	ldi	r31, 0x01	; 1
 688:	4f 1a       	sub	r4, r31
 68a:	51 08       	sbc	r5, r1
 68c:	41 14       	cp	r4, r1
 68e:	51 04       	cpc	r5, r1
 690:	79 f7       	brne	.-34     	; 0x670 <vfprintf+0x182>
 692:	de c0       	rjmp	.+444    	; 0x850 <vfprintf+0x362>
 694:	84 36       	cpi	r24, 0x64	; 100
 696:	11 f0       	breq	.+4      	; 0x69c <vfprintf+0x1ae>
 698:	89 36       	cpi	r24, 0x69	; 105
 69a:	31 f5       	brne	.+76     	; 0x6e8 <vfprintf+0x1fa>
 69c:	f8 01       	movw	r30, r16
 69e:	27 ff       	sbrs	r18, 7
 6a0:	07 c0       	rjmp	.+14     	; 0x6b0 <vfprintf+0x1c2>
 6a2:	60 81       	ld	r22, Z
 6a4:	71 81       	ldd	r23, Z+1	; 0x01
 6a6:	82 81       	ldd	r24, Z+2	; 0x02
 6a8:	93 81       	ldd	r25, Z+3	; 0x03
 6aa:	0c 5f       	subi	r16, 0xFC	; 252
 6ac:	1f 4f       	sbci	r17, 0xFF	; 255
 6ae:	08 c0       	rjmp	.+16     	; 0x6c0 <vfprintf+0x1d2>
 6b0:	60 81       	ld	r22, Z
 6b2:	71 81       	ldd	r23, Z+1	; 0x01
 6b4:	88 27       	eor	r24, r24
 6b6:	77 fd       	sbrc	r23, 7
 6b8:	80 95       	com	r24
 6ba:	98 2f       	mov	r25, r24
 6bc:	0e 5f       	subi	r16, 0xFE	; 254
 6be:	1f 4f       	sbci	r17, 0xFF	; 255
 6c0:	2f 76       	andi	r18, 0x6F	; 111
 6c2:	b2 2e       	mov	r11, r18
 6c4:	97 ff       	sbrs	r25, 7
 6c6:	09 c0       	rjmp	.+18     	; 0x6da <vfprintf+0x1ec>
 6c8:	90 95       	com	r25
 6ca:	80 95       	com	r24
 6cc:	70 95       	com	r23
 6ce:	61 95       	neg	r22
 6d0:	7f 4f       	sbci	r23, 0xFF	; 255
 6d2:	8f 4f       	sbci	r24, 0xFF	; 255
 6d4:	9f 4f       	sbci	r25, 0xFF	; 255
 6d6:	20 68       	ori	r18, 0x80	; 128
 6d8:	b2 2e       	mov	r11, r18
 6da:	2a e0       	ldi	r18, 0x0A	; 10
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	a4 01       	movw	r20, r8
 6e0:	11 d1       	rcall	.+546    	; 0x904 <__ultoa_invert>
 6e2:	a8 2e       	mov	r10, r24
 6e4:	a8 18       	sub	r10, r8
 6e6:	43 c0       	rjmp	.+134    	; 0x76e <vfprintf+0x280>
 6e8:	85 37       	cpi	r24, 0x75	; 117
 6ea:	29 f4       	brne	.+10     	; 0x6f6 <vfprintf+0x208>
 6ec:	2f 7e       	andi	r18, 0xEF	; 239
 6ee:	b2 2e       	mov	r11, r18
 6f0:	2a e0       	ldi	r18, 0x0A	; 10
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	25 c0       	rjmp	.+74     	; 0x740 <vfprintf+0x252>
 6f6:	f2 2f       	mov	r31, r18
 6f8:	f9 7f       	andi	r31, 0xF9	; 249
 6fa:	bf 2e       	mov	r11, r31
 6fc:	8f 36       	cpi	r24, 0x6F	; 111
 6fe:	c1 f0       	breq	.+48     	; 0x730 <vfprintf+0x242>
 700:	18 f4       	brcc	.+6      	; 0x708 <vfprintf+0x21a>
 702:	88 35       	cpi	r24, 0x58	; 88
 704:	79 f0       	breq	.+30     	; 0x724 <vfprintf+0x236>
 706:	ad c0       	rjmp	.+346    	; 0x862 <vfprintf+0x374>
 708:	80 37       	cpi	r24, 0x70	; 112
 70a:	19 f0       	breq	.+6      	; 0x712 <vfprintf+0x224>
 70c:	88 37       	cpi	r24, 0x78	; 120
 70e:	21 f0       	breq	.+8      	; 0x718 <vfprintf+0x22a>
 710:	a8 c0       	rjmp	.+336    	; 0x862 <vfprintf+0x374>
 712:	2f 2f       	mov	r18, r31
 714:	20 61       	ori	r18, 0x10	; 16
 716:	b2 2e       	mov	r11, r18
 718:	b4 fe       	sbrs	r11, 4
 71a:	0d c0       	rjmp	.+26     	; 0x736 <vfprintf+0x248>
 71c:	8b 2d       	mov	r24, r11
 71e:	84 60       	ori	r24, 0x04	; 4
 720:	b8 2e       	mov	r11, r24
 722:	09 c0       	rjmp	.+18     	; 0x736 <vfprintf+0x248>
 724:	24 ff       	sbrs	r18, 4
 726:	0a c0       	rjmp	.+20     	; 0x73c <vfprintf+0x24e>
 728:	9f 2f       	mov	r25, r31
 72a:	96 60       	ori	r25, 0x06	; 6
 72c:	b9 2e       	mov	r11, r25
 72e:	06 c0       	rjmp	.+12     	; 0x73c <vfprintf+0x24e>
 730:	28 e0       	ldi	r18, 0x08	; 8
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	05 c0       	rjmp	.+10     	; 0x740 <vfprintf+0x252>
 736:	20 e1       	ldi	r18, 0x10	; 16
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	02 c0       	rjmp	.+4      	; 0x740 <vfprintf+0x252>
 73c:	20 e1       	ldi	r18, 0x10	; 16
 73e:	32 e0       	ldi	r19, 0x02	; 2
 740:	f8 01       	movw	r30, r16
 742:	b7 fe       	sbrs	r11, 7
 744:	07 c0       	rjmp	.+14     	; 0x754 <vfprintf+0x266>
 746:	60 81       	ld	r22, Z
 748:	71 81       	ldd	r23, Z+1	; 0x01
 74a:	82 81       	ldd	r24, Z+2	; 0x02
 74c:	93 81       	ldd	r25, Z+3	; 0x03
 74e:	0c 5f       	subi	r16, 0xFC	; 252
 750:	1f 4f       	sbci	r17, 0xFF	; 255
 752:	06 c0       	rjmp	.+12     	; 0x760 <vfprintf+0x272>
 754:	60 81       	ld	r22, Z
 756:	71 81       	ldd	r23, Z+1	; 0x01
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0e 5f       	subi	r16, 0xFE	; 254
 75e:	1f 4f       	sbci	r17, 0xFF	; 255
 760:	a4 01       	movw	r20, r8
 762:	d0 d0       	rcall	.+416    	; 0x904 <__ultoa_invert>
 764:	a8 2e       	mov	r10, r24
 766:	a8 18       	sub	r10, r8
 768:	fb 2d       	mov	r31, r11
 76a:	ff 77       	andi	r31, 0x7F	; 127
 76c:	bf 2e       	mov	r11, r31
 76e:	b6 fe       	sbrs	r11, 6
 770:	0b c0       	rjmp	.+22     	; 0x788 <vfprintf+0x29a>
 772:	2b 2d       	mov	r18, r11
 774:	2e 7f       	andi	r18, 0xFE	; 254
 776:	a5 14       	cp	r10, r5
 778:	50 f4       	brcc	.+20     	; 0x78e <vfprintf+0x2a0>
 77a:	b4 fe       	sbrs	r11, 4
 77c:	0a c0       	rjmp	.+20     	; 0x792 <vfprintf+0x2a4>
 77e:	b2 fc       	sbrc	r11, 2
 780:	08 c0       	rjmp	.+16     	; 0x792 <vfprintf+0x2a4>
 782:	2b 2d       	mov	r18, r11
 784:	2e 7e       	andi	r18, 0xEE	; 238
 786:	05 c0       	rjmp	.+10     	; 0x792 <vfprintf+0x2a4>
 788:	7a 2c       	mov	r7, r10
 78a:	2b 2d       	mov	r18, r11
 78c:	03 c0       	rjmp	.+6      	; 0x794 <vfprintf+0x2a6>
 78e:	7a 2c       	mov	r7, r10
 790:	01 c0       	rjmp	.+2      	; 0x794 <vfprintf+0x2a6>
 792:	75 2c       	mov	r7, r5
 794:	24 ff       	sbrs	r18, 4
 796:	0d c0       	rjmp	.+26     	; 0x7b2 <vfprintf+0x2c4>
 798:	fe 01       	movw	r30, r28
 79a:	ea 0d       	add	r30, r10
 79c:	f1 1d       	adc	r31, r1
 79e:	80 81       	ld	r24, Z
 7a0:	80 33       	cpi	r24, 0x30	; 48
 7a2:	11 f4       	brne	.+4      	; 0x7a8 <vfprintf+0x2ba>
 7a4:	29 7e       	andi	r18, 0xE9	; 233
 7a6:	09 c0       	rjmp	.+18     	; 0x7ba <vfprintf+0x2cc>
 7a8:	22 ff       	sbrs	r18, 2
 7aa:	06 c0       	rjmp	.+12     	; 0x7b8 <vfprintf+0x2ca>
 7ac:	73 94       	inc	r7
 7ae:	73 94       	inc	r7
 7b0:	04 c0       	rjmp	.+8      	; 0x7ba <vfprintf+0x2cc>
 7b2:	82 2f       	mov	r24, r18
 7b4:	86 78       	andi	r24, 0x86	; 134
 7b6:	09 f0       	breq	.+2      	; 0x7ba <vfprintf+0x2cc>
 7b8:	73 94       	inc	r7
 7ba:	23 fd       	sbrc	r18, 3
 7bc:	12 c0       	rjmp	.+36     	; 0x7e2 <vfprintf+0x2f4>
 7be:	20 ff       	sbrs	r18, 0
 7c0:	06 c0       	rjmp	.+12     	; 0x7ce <vfprintf+0x2e0>
 7c2:	5a 2c       	mov	r5, r10
 7c4:	73 14       	cp	r7, r3
 7c6:	18 f4       	brcc	.+6      	; 0x7ce <vfprintf+0x2e0>
 7c8:	53 0c       	add	r5, r3
 7ca:	57 18       	sub	r5, r7
 7cc:	73 2c       	mov	r7, r3
 7ce:	73 14       	cp	r7, r3
 7d0:	60 f4       	brcc	.+24     	; 0x7ea <vfprintf+0x2fc>
 7d2:	b7 01       	movw	r22, r14
 7d4:	80 e2       	ldi	r24, 0x20	; 32
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	2c 87       	std	Y+12, r18	; 0x0c
 7da:	62 d0       	rcall	.+196    	; 0x8a0 <fputc>
 7dc:	73 94       	inc	r7
 7de:	2c 85       	ldd	r18, Y+12	; 0x0c
 7e0:	f6 cf       	rjmp	.-20     	; 0x7ce <vfprintf+0x2e0>
 7e2:	73 14       	cp	r7, r3
 7e4:	10 f4       	brcc	.+4      	; 0x7ea <vfprintf+0x2fc>
 7e6:	37 18       	sub	r3, r7
 7e8:	01 c0       	rjmp	.+2      	; 0x7ec <vfprintf+0x2fe>
 7ea:	31 2c       	mov	r3, r1
 7ec:	24 ff       	sbrs	r18, 4
 7ee:	11 c0       	rjmp	.+34     	; 0x812 <vfprintf+0x324>
 7f0:	b7 01       	movw	r22, r14
 7f2:	80 e3       	ldi	r24, 0x30	; 48
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	2c 87       	std	Y+12, r18	; 0x0c
 7f8:	53 d0       	rcall	.+166    	; 0x8a0 <fputc>
 7fa:	2c 85       	ldd	r18, Y+12	; 0x0c
 7fc:	22 ff       	sbrs	r18, 2
 7fe:	16 c0       	rjmp	.+44     	; 0x82c <vfprintf+0x33e>
 800:	21 ff       	sbrs	r18, 1
 802:	03 c0       	rjmp	.+6      	; 0x80a <vfprintf+0x31c>
 804:	88 e5       	ldi	r24, 0x58	; 88
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	02 c0       	rjmp	.+4      	; 0x80e <vfprintf+0x320>
 80a:	88 e7       	ldi	r24, 0x78	; 120
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	b7 01       	movw	r22, r14
 810:	0c c0       	rjmp	.+24     	; 0x82a <vfprintf+0x33c>
 812:	82 2f       	mov	r24, r18
 814:	86 78       	andi	r24, 0x86	; 134
 816:	51 f0       	breq	.+20     	; 0x82c <vfprintf+0x33e>
 818:	21 fd       	sbrc	r18, 1
 81a:	02 c0       	rjmp	.+4      	; 0x820 <vfprintf+0x332>
 81c:	80 e2       	ldi	r24, 0x20	; 32
 81e:	01 c0       	rjmp	.+2      	; 0x822 <vfprintf+0x334>
 820:	8b e2       	ldi	r24, 0x2B	; 43
 822:	27 fd       	sbrc	r18, 7
 824:	8d e2       	ldi	r24, 0x2D	; 45
 826:	b7 01       	movw	r22, r14
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	3a d0       	rcall	.+116    	; 0x8a0 <fputc>
 82c:	a5 14       	cp	r10, r5
 82e:	30 f4       	brcc	.+12     	; 0x83c <vfprintf+0x34e>
 830:	b7 01       	movw	r22, r14
 832:	80 e3       	ldi	r24, 0x30	; 48
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	34 d0       	rcall	.+104    	; 0x8a0 <fputc>
 838:	5a 94       	dec	r5
 83a:	f8 cf       	rjmp	.-16     	; 0x82c <vfprintf+0x33e>
 83c:	aa 94       	dec	r10
 83e:	f4 01       	movw	r30, r8
 840:	ea 0d       	add	r30, r10
 842:	f1 1d       	adc	r31, r1
 844:	80 81       	ld	r24, Z
 846:	b7 01       	movw	r22, r14
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	2a d0       	rcall	.+84     	; 0x8a0 <fputc>
 84c:	a1 10       	cpse	r10, r1
 84e:	f6 cf       	rjmp	.-20     	; 0x83c <vfprintf+0x34e>
 850:	33 20       	and	r3, r3
 852:	09 f4       	brne	.+2      	; 0x856 <vfprintf+0x368>
 854:	5d ce       	rjmp	.-838    	; 0x510 <vfprintf+0x22>
 856:	b7 01       	movw	r22, r14
 858:	80 e2       	ldi	r24, 0x20	; 32
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	21 d0       	rcall	.+66     	; 0x8a0 <fputc>
 85e:	3a 94       	dec	r3
 860:	f7 cf       	rjmp	.-18     	; 0x850 <vfprintf+0x362>
 862:	f7 01       	movw	r30, r14
 864:	86 81       	ldd	r24, Z+6	; 0x06
 866:	97 81       	ldd	r25, Z+7	; 0x07
 868:	02 c0       	rjmp	.+4      	; 0x86e <vfprintf+0x380>
 86a:	8f ef       	ldi	r24, 0xFF	; 255
 86c:	9f ef       	ldi	r25, 0xFF	; 255
 86e:	2c 96       	adiw	r28, 0x0c	; 12
 870:	e2 e1       	ldi	r30, 0x12	; 18
 872:	c2 c0       	rjmp	.+388    	; 0x9f8 <__epilogue_restores__>

00000874 <strnlen_P>:
 874:	fc 01       	movw	r30, r24
 876:	05 90       	lpm	r0, Z+
 878:	61 50       	subi	r22, 0x01	; 1
 87a:	70 40       	sbci	r23, 0x00	; 0
 87c:	01 10       	cpse	r0, r1
 87e:	d8 f7       	brcc	.-10     	; 0x876 <strnlen_P+0x2>
 880:	80 95       	com	r24
 882:	90 95       	com	r25
 884:	8e 0f       	add	r24, r30
 886:	9f 1f       	adc	r25, r31
 888:	08 95       	ret

0000088a <strnlen>:
 88a:	fc 01       	movw	r30, r24
 88c:	61 50       	subi	r22, 0x01	; 1
 88e:	70 40       	sbci	r23, 0x00	; 0
 890:	01 90       	ld	r0, Z+
 892:	01 10       	cpse	r0, r1
 894:	d8 f7       	brcc	.-10     	; 0x88c <strnlen+0x2>
 896:	80 95       	com	r24
 898:	90 95       	com	r25
 89a:	8e 0f       	add	r24, r30
 89c:	9f 1f       	adc	r25, r31
 89e:	08 95       	ret

000008a0 <fputc>:
 8a0:	0f 93       	push	r16
 8a2:	1f 93       	push	r17
 8a4:	cf 93       	push	r28
 8a6:	df 93       	push	r29
 8a8:	18 2f       	mov	r17, r24
 8aa:	09 2f       	mov	r16, r25
 8ac:	eb 01       	movw	r28, r22
 8ae:	8b 81       	ldd	r24, Y+3	; 0x03
 8b0:	81 fd       	sbrc	r24, 1
 8b2:	03 c0       	rjmp	.+6      	; 0x8ba <fputc+0x1a>
 8b4:	8f ef       	ldi	r24, 0xFF	; 255
 8b6:	9f ef       	ldi	r25, 0xFF	; 255
 8b8:	20 c0       	rjmp	.+64     	; 0x8fa <fputc+0x5a>
 8ba:	82 ff       	sbrs	r24, 2
 8bc:	10 c0       	rjmp	.+32     	; 0x8de <fputc+0x3e>
 8be:	4e 81       	ldd	r20, Y+6	; 0x06
 8c0:	5f 81       	ldd	r21, Y+7	; 0x07
 8c2:	2c 81       	ldd	r18, Y+4	; 0x04
 8c4:	3d 81       	ldd	r19, Y+5	; 0x05
 8c6:	42 17       	cp	r20, r18
 8c8:	53 07       	cpc	r21, r19
 8ca:	7c f4       	brge	.+30     	; 0x8ea <fputc+0x4a>
 8cc:	e8 81       	ld	r30, Y
 8ce:	f9 81       	ldd	r31, Y+1	; 0x01
 8d0:	9f 01       	movw	r18, r30
 8d2:	2f 5f       	subi	r18, 0xFF	; 255
 8d4:	3f 4f       	sbci	r19, 0xFF	; 255
 8d6:	39 83       	std	Y+1, r19	; 0x01
 8d8:	28 83       	st	Y, r18
 8da:	10 83       	st	Z, r17
 8dc:	06 c0       	rjmp	.+12     	; 0x8ea <fputc+0x4a>
 8de:	e8 85       	ldd	r30, Y+8	; 0x08
 8e0:	f9 85       	ldd	r31, Y+9	; 0x09
 8e2:	81 2f       	mov	r24, r17
 8e4:	09 95       	icall
 8e6:	89 2b       	or	r24, r25
 8e8:	29 f7       	brne	.-54     	; 0x8b4 <fputc+0x14>
 8ea:	2e 81       	ldd	r18, Y+6	; 0x06
 8ec:	3f 81       	ldd	r19, Y+7	; 0x07
 8ee:	2f 5f       	subi	r18, 0xFF	; 255
 8f0:	3f 4f       	sbci	r19, 0xFF	; 255
 8f2:	3f 83       	std	Y+7, r19	; 0x07
 8f4:	2e 83       	std	Y+6, r18	; 0x06
 8f6:	81 2f       	mov	r24, r17
 8f8:	90 2f       	mov	r25, r16
 8fa:	df 91       	pop	r29
 8fc:	cf 91       	pop	r28
 8fe:	1f 91       	pop	r17
 900:	0f 91       	pop	r16
 902:	08 95       	ret

00000904 <__ultoa_invert>:
 904:	fa 01       	movw	r30, r20
 906:	aa 27       	eor	r26, r26
 908:	28 30       	cpi	r18, 0x08	; 8
 90a:	51 f1       	breq	.+84     	; 0x960 <__ultoa_invert+0x5c>
 90c:	20 31       	cpi	r18, 0x10	; 16
 90e:	81 f1       	breq	.+96     	; 0x970 <__ultoa_invert+0x6c>
 910:	e8 94       	clt
 912:	6f 93       	push	r22
 914:	6e 7f       	andi	r22, 0xFE	; 254
 916:	6e 5f       	subi	r22, 0xFE	; 254
 918:	7f 4f       	sbci	r23, 0xFF	; 255
 91a:	8f 4f       	sbci	r24, 0xFF	; 255
 91c:	9f 4f       	sbci	r25, 0xFF	; 255
 91e:	af 4f       	sbci	r26, 0xFF	; 255
 920:	b1 e0       	ldi	r27, 0x01	; 1
 922:	3e d0       	rcall	.+124    	; 0x9a0 <__ultoa_invert+0x9c>
 924:	b4 e0       	ldi	r27, 0x04	; 4
 926:	3c d0       	rcall	.+120    	; 0x9a0 <__ultoa_invert+0x9c>
 928:	67 0f       	add	r22, r23
 92a:	78 1f       	adc	r23, r24
 92c:	89 1f       	adc	r24, r25
 92e:	9a 1f       	adc	r25, r26
 930:	a1 1d       	adc	r26, r1
 932:	68 0f       	add	r22, r24
 934:	79 1f       	adc	r23, r25
 936:	8a 1f       	adc	r24, r26
 938:	91 1d       	adc	r25, r1
 93a:	a1 1d       	adc	r26, r1
 93c:	6a 0f       	add	r22, r26
 93e:	71 1d       	adc	r23, r1
 940:	81 1d       	adc	r24, r1
 942:	91 1d       	adc	r25, r1
 944:	a1 1d       	adc	r26, r1
 946:	20 d0       	rcall	.+64     	; 0x988 <__ultoa_invert+0x84>
 948:	09 f4       	brne	.+2      	; 0x94c <__ultoa_invert+0x48>
 94a:	68 94       	set
 94c:	3f 91       	pop	r19
 94e:	2a e0       	ldi	r18, 0x0A	; 10
 950:	26 9f       	mul	r18, r22
 952:	11 24       	eor	r1, r1
 954:	30 19       	sub	r19, r0
 956:	30 5d       	subi	r19, 0xD0	; 208
 958:	31 93       	st	Z+, r19
 95a:	de f6       	brtc	.-74     	; 0x912 <__ultoa_invert+0xe>
 95c:	cf 01       	movw	r24, r30
 95e:	08 95       	ret
 960:	46 2f       	mov	r20, r22
 962:	47 70       	andi	r20, 0x07	; 7
 964:	40 5d       	subi	r20, 0xD0	; 208
 966:	41 93       	st	Z+, r20
 968:	b3 e0       	ldi	r27, 0x03	; 3
 96a:	0f d0       	rcall	.+30     	; 0x98a <__ultoa_invert+0x86>
 96c:	c9 f7       	brne	.-14     	; 0x960 <__ultoa_invert+0x5c>
 96e:	f6 cf       	rjmp	.-20     	; 0x95c <__ultoa_invert+0x58>
 970:	46 2f       	mov	r20, r22
 972:	4f 70       	andi	r20, 0x0F	; 15
 974:	40 5d       	subi	r20, 0xD0	; 208
 976:	4a 33       	cpi	r20, 0x3A	; 58
 978:	18 f0       	brcs	.+6      	; 0x980 <__ultoa_invert+0x7c>
 97a:	49 5d       	subi	r20, 0xD9	; 217
 97c:	31 fd       	sbrc	r19, 1
 97e:	40 52       	subi	r20, 0x20	; 32
 980:	41 93       	st	Z+, r20
 982:	02 d0       	rcall	.+4      	; 0x988 <__ultoa_invert+0x84>
 984:	a9 f7       	brne	.-22     	; 0x970 <__ultoa_invert+0x6c>
 986:	ea cf       	rjmp	.-44     	; 0x95c <__ultoa_invert+0x58>
 988:	b4 e0       	ldi	r27, 0x04	; 4
 98a:	a6 95       	lsr	r26
 98c:	97 95       	ror	r25
 98e:	87 95       	ror	r24
 990:	77 95       	ror	r23
 992:	67 95       	ror	r22
 994:	ba 95       	dec	r27
 996:	c9 f7       	brne	.-14     	; 0x98a <__ultoa_invert+0x86>
 998:	00 97       	sbiw	r24, 0x00	; 0
 99a:	61 05       	cpc	r22, r1
 99c:	71 05       	cpc	r23, r1
 99e:	08 95       	ret
 9a0:	9b 01       	movw	r18, r22
 9a2:	ac 01       	movw	r20, r24
 9a4:	0a 2e       	mov	r0, r26
 9a6:	06 94       	lsr	r0
 9a8:	57 95       	ror	r21
 9aa:	47 95       	ror	r20
 9ac:	37 95       	ror	r19
 9ae:	27 95       	ror	r18
 9b0:	ba 95       	dec	r27
 9b2:	c9 f7       	brne	.-14     	; 0x9a6 <__ultoa_invert+0xa2>
 9b4:	62 0f       	add	r22, r18
 9b6:	73 1f       	adc	r23, r19
 9b8:	84 1f       	adc	r24, r20
 9ba:	95 1f       	adc	r25, r21
 9bc:	a0 1d       	adc	r26, r0
 9be:	08 95       	ret

000009c0 <__prologue_saves__>:
 9c0:	2f 92       	push	r2
 9c2:	3f 92       	push	r3
 9c4:	4f 92       	push	r4
 9c6:	5f 92       	push	r5
 9c8:	6f 92       	push	r6
 9ca:	7f 92       	push	r7
 9cc:	8f 92       	push	r8
 9ce:	9f 92       	push	r9
 9d0:	af 92       	push	r10
 9d2:	bf 92       	push	r11
 9d4:	cf 92       	push	r12
 9d6:	df 92       	push	r13
 9d8:	ef 92       	push	r14
 9da:	ff 92       	push	r15
 9dc:	0f 93       	push	r16
 9de:	1f 93       	push	r17
 9e0:	cf 93       	push	r28
 9e2:	df 93       	push	r29
 9e4:	cd b7       	in	r28, 0x3d	; 61
 9e6:	de b7       	in	r29, 0x3e	; 62
 9e8:	ca 1b       	sub	r28, r26
 9ea:	db 0b       	sbc	r29, r27
 9ec:	0f b6       	in	r0, 0x3f	; 63
 9ee:	f8 94       	cli
 9f0:	de bf       	out	0x3e, r29	; 62
 9f2:	0f be       	out	0x3f, r0	; 63
 9f4:	cd bf       	out	0x3d, r28	; 61
 9f6:	09 94       	ijmp

000009f8 <__epilogue_restores__>:
 9f8:	2a 88       	ldd	r2, Y+18	; 0x12
 9fa:	39 88       	ldd	r3, Y+17	; 0x11
 9fc:	48 88       	ldd	r4, Y+16	; 0x10
 9fe:	5f 84       	ldd	r5, Y+15	; 0x0f
 a00:	6e 84       	ldd	r6, Y+14	; 0x0e
 a02:	7d 84       	ldd	r7, Y+13	; 0x0d
 a04:	8c 84       	ldd	r8, Y+12	; 0x0c
 a06:	9b 84       	ldd	r9, Y+11	; 0x0b
 a08:	aa 84       	ldd	r10, Y+10	; 0x0a
 a0a:	b9 84       	ldd	r11, Y+9	; 0x09
 a0c:	c8 84       	ldd	r12, Y+8	; 0x08
 a0e:	df 80       	ldd	r13, Y+7	; 0x07
 a10:	ee 80       	ldd	r14, Y+6	; 0x06
 a12:	fd 80       	ldd	r15, Y+5	; 0x05
 a14:	0c 81       	ldd	r16, Y+4	; 0x04
 a16:	1b 81       	ldd	r17, Y+3	; 0x03
 a18:	aa 81       	ldd	r26, Y+2	; 0x02
 a1a:	b9 81       	ldd	r27, Y+1	; 0x01
 a1c:	ce 0f       	add	r28, r30
 a1e:	d1 1d       	adc	r29, r1
 a20:	0f b6       	in	r0, 0x3f	; 63
 a22:	f8 94       	cli
 a24:	de bf       	out	0x3e, r29	; 62
 a26:	0f be       	out	0x3f, r0	; 63
 a28:	cd bf       	out	0x3d, r28	; 61
 a2a:	ed 01       	movw	r28, r26
 a2c:	08 95       	ret

00000a2e <_exit>:
 a2e:	f8 94       	cli

00000a30 <__stop_program>:
 a30:	ff cf       	rjmp	.-2      	; 0xa30 <__stop_program>
